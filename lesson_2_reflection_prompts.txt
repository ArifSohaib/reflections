What happens when you initialize a repository? Why do you need to do it?
  When a repository is initialized, a hidden folder is made in the source folder
  This folder contains all the files and data required to move between versions of the files in the repository.
  We need to do it to start tracking multiple versions of the files in the repository.

How is the staging area different from the working directory and the repository?
What value do you think it offers?
  The staging area contains all the file names to be added to the next commit.
  The repository is the list of all the files being already tracked.
  The working directory is just the directory where the repository is placed in the system.
  The staging area allows us to add or remove files from being tracked and added to the next commit.
  Without the staging area, files would either have to be added one by one or all would be automatically added, which may not be what we want.

How can you use the staging area to make sure you have one commit per logical
change?
  The git diff --staged and git diff commands can be used to check the exact changes being added before they are added.
  git diff --staged tells the changes between the staging area and the latest repository while git diff tells the changes between the working directory and the staging area.
  If anything other than one logical change is different then we know that there is a problem.

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?
  Situations where branches are helpful/necessary:
    When an experimental change is to be made, for example adding a new language or adding a feature that may not work
    When experimenting with someone else' code
    When changing code that a lot of people are using.
    When you want to context-switch/ getting bored or frustrated working on one feature to work on another
  Branches would help in keeping the main code-base separate and safe while a development branch is used to do any experimental work.
  This could be especially helpful when working on consumer level projects or projects/libraries that more people use

How do the diagrams help you visualize the branch structure?
  The diagrams/graph shows the commits and branches and allow me to see which branches are reachable and which branches contain which code.
  For example if a feature eg. different animation was added in main but another branch was checked out before to add another feature, it would be difficult to know which branch contains which features as the coins branch does not contain animation.
  A graph showing the branch structure can allow one to easily understand that the feature was added after the code branched into another.

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?
  When merging two branches, Git looks at the history of the file and checks the files before the merge and the files at the merge.
  If any code was present in the original files but removed by either of the two branches then it is removed.
  All other original code is added.
  In addition, any code added at the commits right before the merge but not in the original is added.

  Representing this in a sequence diagram of the commits of each branch allows us to see what code will be added and what will not be added in the final merged commit

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges
manually?
